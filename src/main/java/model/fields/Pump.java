package model.fields;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Szoftver projekt laboratórium: Sivatagi vízhálózat
//  @ File Name : Model.Pump.java
//  @ Date : 2023. 03. 28.
//  @ Author : aD4B team
//
//


import model.Game;
import org.apache.logging.log4j.Logger;
import proto.LogHelper;

import java.util.ArrayList;
import java.util.Random;

/**
 * Víz továbbításáért felelős aktív elem, melynek véges számú nem aktív elem a szomszédja.
 * Pontosan két szomszéd között hoz létre vízáramlást, meghibásodás esetén az áramlás
 * megszűnik, ilyenkor az átmeneti tárolóban növekszik a víz mennyisége.
 */
public class Pump extends ActiveField {
    private static final Logger LOGGER = LogHelper.getLogger();
    private Random random = new Random(); 

    private final int tankCapacity = 5;   //A pumpa belső tárolójának maximális kapacitását tárolja.
    private int tankLevel;      //A pumpa belső tárolójának aktuális telítettségét tárolja.
    private Pipe input;         //A pumpa bemenetén lévő csövet tárolja, amiből kaphat vizet.
    private Pipe output;        //A pumpa kimenetén lévő csövet tárolja, amibe továbbíthat vizet.
    boolean pumpIn = true;        //Pumpa aktuális step-je, true esetén az input csőről szívja a vizet, false esetén az output csőbe nyomja.

    /**
     * Pump állapota
     */
    public String getStat() {
        return "ID: \"" + super.toString() + "\" Szomszédok száma: \"" + neighbourFields.size()
                + "\" Bemenet: \"" + (input == null ? "Null" : input.toString()) + "\" Kimenet: \"" + (output == null ? "Null" : output.toString()) + "\" Vízszint: \"" + tankLevel + "\"";
    }

    /**
     * Pump ID
     *
     * @return állapotleírás
     */
    @Override
    public String toString() {
        return "ID: \"" + super.toString() + "\"";
    }


    /**
     * Beállítja a pumpa be- és kimeneti
     * csövét, vagyis az input és output attribútumok értékét a paraméterként kapott értékek
     * szerint.
     *
     * @param input  Bemeneti cső
     * @param output Kimeneti cső
     * @return Beállítás sikeressége
     */
    @Override
    public boolean settedPump(Pipe input, Pipe output) {
        if (input == null || output == null || input == output) {
            LOGGER.info("SIKERTELEN pumpaátállítás");
            return false; //Ha null, vagy megegyeznek akkor ne állítsa be rá
        }

        //Ha nem lenne a szomszédos listán akkor adjuk hozzá
        if (!neighbourFields.contains(input)) neighbourFields.add(input);
        if (!neighbourFields.contains(output)) neighbourFields.add(output);

        this.input = input;
        this.output = output;
        LOGGER.info("SIKERES pumpaátállítás");
        return true;
    }

    /**
     * A bemenetén kapott vizet továbbadja a kimenetére, amennyiben tudja
     */
    public void step() {
        if(!Game.getInstance().isTrueBOOL() && !Game.getInstance().isFalseBOOL()){
            int random100 = this.random.nextInt(100);
            if(5 > random100) isDamaged=true;
        }
        if(Game.getInstance().isTrueBOOL()){
            LOGGER.debug("A pumpa el lett rontva");
            isDamaged=true;
        }
        if(Game.getInstance().isFalseBOOL()){
            LOGGER.debug("A pumpa nem lett elrontva");
            isDamaged=false;
        }

        if (!neighbourFields.contains(input) && !neighbourFields.contains(output) && !isDamaged) {
            LOGGER.warn("Nincs a szomszédos elemek között a be/kimenetnek állított cső, így nem tudott a pumpa lépni!");
            return;
        }

        if (pumpIn && input != null && !isDamaged) {
            //Input csőről szívjunk vizetł
            tankLevel += input.getFluidLevel();
            input.setFluidLevel(0); //Nullázzuk le, maradékot később visszaadjuk
            LOGGER.debug("Víz szívása a pumpa bemenetéről. Kapott víz: " + input.getFluidLevel());
            if (tankLevel > tankCapacity) {   //Ha túlcsordulna a tartályban lévő víz
                input.setFluidLevel(tankLevel - tankCapacity); //adjuk vissza neki a túlcsorduló mennyiséget
                LOGGER.debug("Túlcsurduló víz a visszaadása: " + (tankLevel - tankCapacity));
                tankLevel = tankCapacity;   //Maximalizáljuk a vízmennyiséget (Maradékot visszaadtuk)
            }
            LOGGER.info("SIKERES vízszívás");
        } else if (!pumpIn && output != null && tankLevel > 0 && !isDamaged) {
            //Output csőre nyomjunk vizet
            tankLevel = output.acceptWater(tankLevel, this);
            LOGGER.info("SIKERES víznyomás");
        }
        if(!pumpIn && output==null && !isDamaged){
            LOGGER.debug("Nincs a pumpának kimenete, így nem történt semmi!");
        }
        if(pumpIn && input != null && !isDamaged){
            LOGGER.debug("Nincs a pumpának bemenete, így nem történt semmi!");
        }
        if(tankLevel == 0 && !isDamaged){
            LOGGER.debug("Üres a tartály!");
        }
        if(isDamaged){
            LOGGER.debug("A pumpa hibás");
        }
        pumpIn = !pumpIn; //Cseréljük fel, hogy legközelebb másik lépést végezze el.
    }

    /**
     * A bemenetén kapott vizet kezeli.
     *
     * @param water     átadni kívánt vízmennyiség
     * @param fromField a mező, akitől a viet kapja
     * @return maradék vízmennyiség, ami nem fért a tárolóba
     */
    public int acceptWater(int water, Field fromField) {
        if(!fromField.equals(input)){  //ha nem inputtól kap vizet, eldobja
            LOGGER.debug("nem inputról jött bele víz, a kapott értékkel tér vissza: {}", water);
            return water;
        }

        int remainder;
        tankLevel += water;
        if (tankLevel > tankCapacity) {   //Ha túlcsordulna a tartályban lévő víz
            remainder = tankLevel - tankCapacity;
            tankLevel = tankCapacity;
        } else {
            remainder = 0;
        }          //Belefért minden víz
        LOGGER.info("SIKERES vízelfogadás");
        LOGGER.debug(tankLevel + " mennyíségű víz van a pumpában");
        LOGGER.debug(remainder + " mennyíségű víz nem fért bele a pumpába");
        return remainder;
    }


    /**
     * Beállítja a pumpa bemeneti csövét a paraméterben megadottra.
     *
     * @param pipe Bemeneti cső
     */
    @Override
    public void setInput(Pipe pipe) {
        LOGGER.debug("Cső beállítása inputként: " + pipe.toString());
        input = pipe;
        if (!neighbourFields.contains(pipe))
            neighbourFields.add(pipe);
    }

    /**
     * Beállítja a pumpa kimeneti csövét a paraméterben megadottra.
     *
     * @param pipe Kimeneti cső
     */
    @Override
    public void setOutput(Pipe pipe) {
        LOGGER.debug("Cső beállítása outputként: " + pipe.toString());
        output = pipe;
        if (!neighbourFields.contains(pipe))
            neighbourFields.add(pipe);
    }

    /**
     * Kicseréli a oldPipe-el megadott (szomszédos) csövet a newPipe-ben megadott csőre.
     * Ha a oldPipe cső az ActiveField ki/bemeneti csöve volt, akkor ezután newPipe lesz az ActiveField ki/bemeneti csöve.
     *
     * @param oldPipe Ezt az elemet akarjuk lecserléni.
     * @param newPipe Erre az elemre akarjuk lecserélni.
     */
    @Override
    public void replacePipe(Pipe oldPipe, Pipe newPipe) {
        if (oldPipe == null || newPipe == null) {
            LOGGER.warn("Hibás replacePipe hívás!");
            return;
        }

        //Ha ki/bemeneti cső volt akkor cseréljük le
        if (input == oldPipe) {
            input = newPipe;
            LOGGER.info("Bemeneti cső lecserélve!");
        }
        if (output == oldPipe) {
            output = newPipe;
            LOGGER.info("Kimeneti cső lecserélve!");
        }

        //Cseréljük le a szomszédos listában is
        super.replacePipe(oldPipe, newPipe);
    }


    /**
     * Visszaadja a mezőn alkalmazható műveletetek
     */
    @Override
    public ArrayList<String> getCommands() {
        //a parancsok megadása string tömbben
        ArrayList<String> cmds = new ArrayList<>(super.getCommands());
        cmds.add("fix");
        cmds.add("change");
        return cmds;
    }

    /**
     * Visszaadja a pumpa input csövét.
     */
    public Pipe getInput() {
        return input;
    }
    /**
     * Visszaadja a pumpa output csövét.
     */
    public Pipe getOutput() {
        return output;
    }

    /**
     * Visszaadja a pumpában lévő vízmennyiséget.
     */
    public int getTankLevel() {
        return tankLevel;
    }


    /**
     * Visszaadja a pumpa maximális kapacitását.
     */
    public int getTankCapacity() {
        return tankCapacity;
    }
}
