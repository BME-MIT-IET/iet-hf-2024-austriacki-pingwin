package model.characters;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Szoftver projekt laboratórium: Sivatagi vízhálózat
//  @ File Name : Model.Character.java
//  @ Date : 2023. 03. 28.
//  @ Author : aD4B team
//
//


import model.fields.Field;
import model.fields.Pipe;
import org.apache.logging.log4j.Logger;
import proto.LogHelper;

import java.util.ArrayList;

/**
 * Játékosokat reprezentáló absztrakt ősosztály. Képes a pályán való mozgásra.
 */
public abstract class Character {
    private static final Logger LOGGER = LogHelper.getLogger();

    protected Field actField;       //Az elem, amelyen a játékos áll.
    protected int glueTimer = 0;          //Játékos nem mozoghat, még a számláló értéke nem 0.
    protected int movePerformedNumber = 0;  //true, ha az adott körben már mozgott a játékos
    protected int maxMovePerfomedNumber = 2;  //maximális lépések száma
    protected boolean actionPerformed = false;    //true, ha az adott körben már végrehajtott egy akciót a játékos

    /**
     * Character Konstruktora.
     *
     * @param actField ActiveField, amelyre a játékos kerül.
     */
    public Character(Field actField) {
        this.actField = actField;
        actField.acceptCharacter(this);
        LOGGER.debug("Character.actField = " + actField);
    }

    /**
     * Lekérdezi, hogy végrehajtotta-e már a character a lépéseit.
     * @return true, ha sikeresen lépett már
     */
    public boolean getMovePerformed(){
        return movePerformedNumber>=maxMovePerfomedNumber;
    }
    /**
     * Lekérdezi, hogy végrehajtott-e már a character valamilyen akciót.
     * @return true, ha sikeresen végrehajtott már egy akciót
     */
    public boolean getActionPerformed(){
        return actionPerformed;
    }


    /**
     * Karakter körének léptetése.
     */
    public void elapseRound() {
        if (glueTimer > 0) glueTimer--; //mert lement egy köre
        actionPerformed=false;
        movePerformedNumber=0;
        LOGGER.debug("Játékos körének vége: (glueTimer={})", glueTimer);
    }


    /**
     * Karakter mozgása a pályán egy általa kiválasztott szomszédos
     * elemre, sikeres lépés esetén true-val tér vissza.
     *
     * @return ha sikerült lépni true, ha nem false (pl.: foglalt volt egy cső, le volt ragasztva)
     */
    public boolean move(Field nextField) {
        if(movePerformedNumber>=maxMovePerfomedNumber){
            System.out.println("Már végrehajtotta a lépéseit ebben a körben!");
            LOGGER.debug("Nem léphet megint, (movePerformedNumber==maxMovePerformedNumber)");
            return false;
        }
        if (glueTimer != 0) {
            LOGGER.info("SIKERTELEN - karakter nem tudott lépni, mert le van ragasztva");
            LOGGER.debug("Character.glueTimer > 0");
            return false; //ha le van ragasztva nem tud lépni
        }

        //a lépés ellenőrzése
        if (nextField != null) { //lép
            Field tmpField = nextField.acceptCharacter(this);   //Fogadtassuk el a lépési szándékunkat

            if (tmpField == null) {
                LOGGER.info("SIKERTELEN - karakter nem tudott lépni, mert nem volt hely a kiválasztott mezőn!");
                return false;
            } else {
                actField.removeCharacter(this);
                actField = tmpField;
                System.out.println(actField + " mezőre lépett!");
                LOGGER.info("SIKERES - karakter sikeresen új mezőre lépett");
                LOGGER.debug("Character.actField = " + actField.toString());
                movePerformedNumber++;
                return true;
            }
        } else { //nem lép
            LOGGER.info("SIKERTELEN - karakter nem tudott lépni!");
            return false;
        }

    }

    /**
     * Megváltoztatja a pumpa vízáramlási irányát, sikeres művelet
     * esetén true-val tér vissza.
     *
     * @return ha pumpán állt true, ha nem false
     */
    public boolean setPump(Pipe input, Pipe output) {
        if(actionPerformed){
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        if (actField.settedPump(input, output)) {
            LOGGER.info("SIKERES - karakter sikeresen megváltoztatta a pumpa be és kimenetét");
            LOGGER.debug("Pump.output = " + output.toString());
            actionPerformed=true;
            return true;
        } else {
            LOGGER.info("SIKERTELEN - karakter nem tudta megváltoztatni a pumpa be és kimenetét");
            return false;
        }
    }

    /**
     * Kilyukasztja a csövet, amelyiken a játékos áll.
     *
     * @return Sikeres művelet esetén true a visszatérési érték.
     */
    public boolean damagePipe() {
        if(actionPerformed){
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        if (actField.damagedPipe()) {
            LOGGER.info("SIKERES - karakter sikeresen elrontotta a csövet");
            LOGGER.debug("Field.isDamaged = true");
            actionPerformed=true;
            return true;
        } else {
            LOGGER.info("SIKERTELEN - karakter nem tudta elrontani az elemet");
            return false;
        }
    }


    /**
     * Ragadóssá teszi a csövet, amelyiken a játékos áll.
     * Így aki legközelebb rálép, egy ideig nem tud továbblépni.
     *
     * @return Sikeres művelet esetén true a visszatérési értéke.
     */
    public boolean stickPipe() {
        if(actionPerformed){
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        if (actField.makeSticky()) {
            LOGGER.info("SIKERES - karakter sikeresen ragadóssá tette a csövet");
            LOGGER.debug("Pipe.isSticky = true");
            actionPerformed=true;
            return true;
        } else {
            LOGGER.info("SIKERTELEN - karakter nem tudta ragadóssá tenni a csövet");
            return false;
        }
    }


    /**
     * A time paraméterben megadott ideig lefagyasztja a játékost, így addig nem tud mozogni.
     *
     * @param time fagyasztási idő
     */
    public void glue(int time) {
        glueTimer = time;
        LOGGER.info("SIKERES - karakter leragad adott időre");
        LOGGER.debug("Character.glueTimer = " + glueTimer);
    }

    /**
     * Visszaadja a karakter által használható műveletetek
     */
    public List<String> getCommands() {
        //a parancsok megadása string tömbben
        ArrayList<String> cmds = new ArrayList<>();
        cmds.add("move");
        cmds.add("change");
        cmds.add("damage");
        cmds.add("sticky");
        return cmds;
    }


    /**
     * Lekérdezi melyik mezőn áll a játékos
     *
     * @return Mező, amelyen a játékos áll
     */
    public Field getActField() {
        return actField;
    }

    /**
     * Visszaadja, hogy rendelkezik-e a karakter pumpával
     * @return Van-e pumpa
     */
    public boolean hasPump(){return false;}

    /**
     * Visszaadja, hogy a karakter rendelkezik-e csővel
     * @return Van-e cső
     */
    public boolean hasPipe(){return false;}
}
