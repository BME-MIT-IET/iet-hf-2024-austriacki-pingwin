package model.characters;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Szoftver projekt laboratórium: Sivatagi vízhálózat
//  @ File Name : Model.Plumber.java
//  @ Date : 2023. 03. 28.
//  @ Author : aD4B team
//
//


import model.Game;
import model.fields.Field;
import model.fields.Pipe;
import model.fields.Pump;
import org.apache.logging.log4j.Logger;
import proto.LogHelper;

import java.util.ArrayList;

/**
 * Vízszerelő karaktert reprezentáló osztály. Csövek és pumpák javítására képes. Állíthatja a
 * pumpákat, átkötheti a csöveket, bekötheti a ciszternáknál felvett pumpákat.
 */
public class Plumber extends Character {
    private static final Logger LOGGER = LogHelper.getLogger();

    private Pump pump;          //A ciszternánál felvett pumpa referenciája.
    private Pipe pipe;          //Az átkötni kívánt csőre mutató referencia.

    public Plumber(Field actField) {
        super(actField);
        LOGGER.info("SIKERES - plumber sikeresen létrejött");
    }


    @Override
    public String toString() {
        return "ID: \"" + super.toString() + "\" Pozíció: \"" + (actField == null ? "Null" : actField.toString()) + "\" GlueTimer: \"" + glueTimer
                + "\" Pumpa: \"" + (pump == null ? "Null" : pump.toString()) + "\" Pipe: \"" + (pipe == null ? "Null" : pipe.toString())+"\"";
    }

    /**
     * Azon elem megjavítása, amelyiken a vízszerelő áll.
     *
     * @return sikerült-e az akció
     */
    public boolean fix() {
        if (actField.fixed()) {
            LOGGER.info("SIKERES - plumber sikeresen megjavította az elemet amin áll");
            LOGGER.debug("Field.isDamaged = false : " + actField.toString());
            actionPerformed = true;
            return true;
        } else {
            LOGGER.info("SIKERTELEN - plumber nem tudta megjavítani az elemet amin áll");
            return false;
        }
    }

    /**
     * A vízszerelő felvehet egy pumpát a ciszternánál.
     * Pumpa sikeres felvétele esetén TRUE a visszatérés.
     *
     * @return sikerült-e az akció
     */
    public boolean pickPump() {
        if (actionPerformed) {
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        if (pump != null) { //Ha van már nálunk pumpa
            LOGGER.info("SIKERTELEN - plumber nem tudott felvenni pumpát");
            return false;
        }
        //Pumpa kérése:
        pump = actField.givePump();
        LOGGER.info("SIKERES - plumber sikeresen felvett egy pumpát");
        LOGGER.debug("Plumber.pump = " + pump.toString());
        actionPerformed = true;
        return true;

    }


    /**
     * A ciszternánál felvett pumpa bekötése. Sikeres művelet esetén TRUE.
     *
     * @return sikerült-e az akció
     */
    public boolean placePump() {
        if (actionPerformed) {
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        //ha van pumpa a szerelőnél, leteszi
        if (pump != null) {
            //ha sikeres a művelet
            if (actField.placeDownPump(pump)) {
                actField = pump; //átlép a lehelyezett pumpára
                actField.acceptCharacter(this); //az a cső amin állt megsemmisült

                Game.getInstance().addSteppable(pump); //Pumpa "aktiválása"

                pump = null; //nullázza a nála lévő pumpát

                LOGGER.info("SIKERES - plumber sikeresen letett egy pumpát");
                LOGGER.debug("Plumber.pump = null\t Plumber.actField = " + actField.toString());
                actionPerformed = true;
                return true;
            }
            LOGGER.debug("a művelet nem sikerült");
        }
        //ha sikertelen a művelet
        LOGGER.debug("SIKERTELEN - plumber nem tudott letenni pumpát");
        return false;
    }

    /**
     * Cső lecsatlakoztatása.
     *
     * @return true, ha sikeresen fel lett véve a cső
     */
    public boolean pickPipe(Field chosenPipe) {
        if (actionPerformed) {
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        //a választás ellenőrzése, ha null/van nála már cső hiba történt
        if (pipe == null && chosenPipe != null) { //megtörtént a művelet
            pipe = (Pipe) chosenPipe;
            actField.pickUpPipe(pipe);
            LOGGER.info("SIKERES - plumber sikeresen felvett egy csövet");
            LOGGER.debug("Plumber.pipe = " + pipe.toString());
            actionPerformed = true;
            return true;
        }
        LOGGER.info("SIKERTELEN - plumber nem tudott felvenni csövet");
        return false; // ha nem sikerült felvenni a csövet
    }

    /**
     * Cső felcsatlakoztatása azon elemhez, melyen tartózkodunk.
     *
     * @return sikerült-e a művelet
     */
    public boolean placePipe() {
        if (actionPerformed) {
            System.out.println("Már végrehajtott egy akciót ebben a körben!");
            LOGGER.debug("Nem hajthat végre akciót, (actionPerformed=true)");
            return false;
        }
        //ha van cső a szerelőnél
        if (pipe != null) {
            //ha sikeres a művelet
            if (actField.placeDownPipe(pipe)) {
                pipe = null; //nullázza a nála lévő pipeot

                LOGGER.info("SIKERES - plumber sikeresen lerakott egy csövet");
                LOGGER.debug("Plumber.pipe = null");
                actionPerformed = true;
                return true;
            }
        }
        //ha sikertelen a művelet
        LOGGER.info("SIKERTELEN - plumber nem tudott lerakni csövet");
        return false;
    }

    /**
     * Visszaadja a karakter által használható műveletetek
     */
    @Override
    public ArrayList<String> getCommands() {
        //a parancsok megadása string tömbben
        ArrayList<String> cmds = new ArrayList<>(super.getCommands());
        cmds.add("fix");
        cmds.add("pickupPump");
        cmds.add("placedownPump");
        cmds.add("pickupPipe");
        cmds.add("placedownPipe");
        return cmds;
    }

    /**
     * Visszaadja az aktuális csövét a szerelőnek
     * @return cső, ami nála van
     */
    public Pipe getPipe(){
        return pipe;
    }

    /**
     * Visszaadja, hogy a karakter rendelkezik-e pumpával
     * @return Pumpával rendelkezik-e
     */
    @Override
    public boolean hasPump(){
        return pump!=null;
    }

    /**
     * Visszaadja, hogy a karakter rendelkezik-e csővel
     * @return Csővel rendelkezik-e
     */
    @Override
    public boolean hasPipe(){
        return pipe != null;
    }
}
