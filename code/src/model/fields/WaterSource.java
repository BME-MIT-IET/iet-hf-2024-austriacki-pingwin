package model.fields;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Szoftver projekt laboratórium: Sivatagi vízhálózat
//  @ File Name : Model.WaterSource.java
//  @ Date : 2023. 03. 28.
//  @ Author : aD4B team
//
//


import org.apache.logging.log4j.Logger;
import proto.LogHelper;

import java.util.ArrayList;

/**
 * Vízforrást reprezentáló osztály, szomszédos (nem aktív) elemekbe küld vizet.
 */
public class WaterSource extends ActiveField {
    private static final Logger LOGGER = LogHelper.getLogger();

    @Override
    public String toString() {
        return "ID: \"" + super.toString() + "\" Szomszédok száma: \"" + neighbourFields.size() + "\"";
    }

    /**
     * WaterSource állapota
     *
     * @return állapotleírás
     */
    public String getStat() {
        return this.toString();
    }

    /**
     * A hozzácsatlakoztatott összes elemnek átad egységnyi vizet.
     */
    public void step() {
        for (Field f : neighbourFields) {
            f.acceptWater(1, this);
        }
        LOGGER.info("SIKERES vízforrás léptetés");
        LOGGER.debug("A vízforrás vizet nyomott minden kimenetére");
    }

    /**
     * Kezeli, ha vizet kap. Mivel nem fogadhat vizet,
     * így mindig a kapott víz mennyiségével tér vissza.
     *
     * @param water     Kapott vízmennyiség
     * @param fromField A vizet küldő mező
     * @return fennmaradó vízmennyiség, küldő visszakapja
     */
    public int acceptWater(int water, Field fromField) {
        LOGGER.info("SIKERTELEN víznyomás");
        LOGGER.debug("A vízforrásba vizet próbált nyomni: " + fromField.toString());
        return 0;
    }


    /**
     * Hozzáadja a paraméterben megadott csövet a kimeneti csövekhez.
     *
     * @param pipe Kimeneti cső
     */
    @Override
    public void setOutput(Pipe pipe) {
        if (!neighbourFields.contains(pipe))
            neighbourFields.add(pipe);
        LOGGER.info("SIKERES kimenetbeállítás vízforrásra");
        LOGGER.debug("A vízforráshoz új kimenet lett hozzáadva: " + pipe.toString());
    }

    /**
     * Visszaadja a mezőn alkalmazható műveletetek, ActiveFieldben megvalósított
     */
    @Override
    public ArrayList<String> getCommands() {
        return super.getCommands();
    }

}